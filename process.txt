The process

TECH STACK
DB has simple static setup (Orders, LineItems, Products, shops, etc.) At first I thought MySQL would be good because of the static relational structure, but dynamic schemas means I can easily restructure if I find out I need some new fields etc.
---> MongoDB

server NodeJs
I want speed --> Node with its single threaded execution/non-blocking IO and the site would have any intensive server-side processing.
I know javascript pretty well/have worked lightly with NodeJs (ES6)


back-end frameworks
express js -- large community, compatibility, lightweight, simple routing
ejs -- templating, helps enforce MVC
mongoose js -- connects to mongodb, enforces schema structures

testing
mocha and chai

Implementing the full stack with js just made sense given that I have a lot of experience with it.

step 1:
Understand what a container is...
Understand what the heck kubernetes and docker are and how they fit into the container ecosystem
Started with completing tutorials to get a feel for each technology.
DOCKER IS ACTUALLY REALLY COOL?! (this process of discovery was continued later)

Step 2: figure out how to use express, and mongoose.
I used express when building my personal website, but I only scratched the surface in terms of the features it offers.
finished more random tutorials on basic usage/routing.
During some of them, I would modify some of the steps and directly apply them to my project.
Did the same with mongoose. --- Very intuitive schema definitions and methods
Defined Schemas for User, Shop, Order, Product, LineItem

step 3: How to manage sessions with login.
I already knew I wanted to have some sort of login system to control access, just needed to research how it could be done...
---> the npm module express-session. Exactly what I was looking for! :))))))

step 4: start creating tests
Created end points for user creation, login and logout.
Figured out how to setup js tests with mocha and chai via adapting tutorials
CALLBACK HELL !!!!!
Modified all the tests to use async await for readability and my own sanity

step 5:
build out Product, Shop, and Order Model methods
This was much easier to think about now that I had an idea how everything worked from building the User methods

step 6:
create test scripts for Product, shop and order with mocha and chai
async await made this a lot more intuititve
nonetheless I found holes in the functionality of the Models so this step also encompasses going back and fixing the models

step 7:
build basic templates with ejs and the get routes for each page
This step included learning some basic ejs syntax via tutorials/docs and implementing it.

step 8:
test application on my computer
Debugged any issues with requests and responses


step 9: DOCKER!!
Now that I was sure everything was working on my local environment
I had to write Dockerfile and create the docker image to prep for deployment


step 10:
test docker image locally and push the image onto my dockerhub account

step 11:
create my cluster on kubernetes and upload the image!
check it out at http://35.192.57.165/
